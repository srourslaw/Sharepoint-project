input {
  # Application logs from file
  file {
    path => "/var/log/app/*.log"
    start_position => "beginning"
    tags => ["application"]
    codec => "json"
  }

  # Docker container logs
  gelf {
    port => 12201
    tags => ["docker"]
  }

  # Syslog input
  syslog {
    port => 514
    tags => ["syslog"]
  }

  # HTTP input for direct log shipping
  http {
    port => 8080
    tags => ["http"]
  }

  # Beats input (for future use)
  beats {
    port => 5044
    tags => ["beats"]
  }
}

filter {
  # Parse application logs
  if "application" in [tags] {
    # Already JSON parsed by codec
    
    # Add hostname if not present
    if ![host] {
      mutate {
        add_field => { "host" => "%{HOSTNAME}" }
      }
    }

    # Parse log level
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }

    # Parse timestamp
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }

    # Extract user information
    if [userId] {
      mutate {
        add_field => { "user_id" => "%{userId}" }
      }
    }

    # Extract request information
    if [requestId] {
      mutate {
        add_field => { "request_id" => "%{requestId}" }
      }
    }

    # Parse SharePoint-specific fields
    if [sharepointSite] {
      mutate {
        add_field => { "sharepoint_site" => "%{sharepointSite}" }
      }
    }

    # Parse AI interaction fields
    if [aiModel] {
      mutate {
        add_field => { "ai_model" => "%{aiModel}" }
        add_field => { "ai_tokens" => "%{aiTokens}" }
        add_field => { "ai_cost" => "%{aiCost}" }
      }
    }
  }

  # Parse Docker container logs
  if "docker" in [tags] {
    # Extract container information from Docker labels
    if [container_name] {
      if [container_name] =~ /sharepoint-ai-backend/ {
        mutate {
          add_field => { "service" => "backend" }
          add_field => { "service_type" => "api" }
        }
      } else if [container_name] =~ /sharepoint-ai-frontend/ {
        mutate {
          add_field => { "service" => "frontend" }
          add_field => { "service_type" => "web" }
        }
      } else if [container_name] =~ /sharepoint-ai-db/ {
        mutate {
          add_field => { "service" => "database" }
          add_field => { "service_type" => "postgres" }
        }
      } else if [container_name] =~ /sharepoint-ai-redis/ {
        mutate {
          add_field => { "service" => "cache" }
          add_field => { "service_type" => "redis" }
        }
      }
    }

    # Parse JSON messages
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "parsed"
      }
      
      if [parsed] {
        # Move parsed fields to top level
        ruby {
          code => "
            parsed = event.get('parsed')
            if parsed.is_a?(Hash)
              parsed.each { |k, v| event.set(k, v) }
              event.remove('parsed')
            end
          "
        }
      }
    }
  }

  # Parse nginx access logs (frontend)
  if "frontend" in [tags] or [service] == "frontend" {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}"
      }
      tag_on_failure => ["_grokparsefailure_nginx"]
    }

    # Parse response time
    if [response_time] {
      mutate {
        convert => { "response_time" => "float" }
      }
    }

    # Parse request size
    if [request_length] {
      mutate {
        convert => { "request_length" => "integer" }
      }
    }

    # Parse response size
    if [body_bytes_sent] {
      mutate {
        convert => { "body_bytes_sent" => "integer" }
      }
    }
  }

  # Parse PostgreSQL logs
  if "database" in [tags] or [service] == "database" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:process_id}\] %{WORD:level}: %{GREEDYDATA:postgres_message}"
      }
      tag_on_failure => ["_grokparsefailure_postgres"]
    }

    # Extract SQL queries
    if [postgres_message] =~ /^(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)/ {
      mutate {
        add_field => { "query_type" => "sql" }
      }

      # Extract slow queries
      if [postgres_message] =~ /duration:/ {
        grok {
          match => {
            "postgres_message" => "duration: %{NUMBER:query_duration:float} ms"
          }
        }

        if [query_duration] and [query_duration] > 1000 {
          mutate {
            add_tag => ["slow_query"]
          }
        }
      }
    }
  }

  # Parse Redis logs
  if "cache" in [tags] or [service] == "cache" {
    grok {
      match => {
        "message" => "\[%{NUMBER:process_id}\] %{TIMESTAMP_ISO8601:timestamp} \* %{GREEDYDATA:redis_message}"
      }
      tag_on_failure => ["_grokparsefailure_redis"]
    }
  }

  # Add environment information
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:development}"
      "application" => "sharepoint-ai-dashboard"
    }
  }

  # Remove empty fields
  ruby {
    code => "
      event.to_hash.keys.each { |k|
        v = event.get(k)
        if v.nil? || (v.respond_to?(:empty?) && v.empty?)
          event.remove(k)
        end
      }
    "
  }

  # Security filtering - remove sensitive fields
  mutate {
    remove_field => [
      "password",
      "secret",
      "token",
      "key",
      "authorization",
      "cookie"
    ]
  }

  # GeoIP lookup for external IPs
  if [clientip] and [clientip] !~ /^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.|127\.)/ {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logstash-sharepoint-ai-%{+YYYY.MM.dd}"
    template_name => "sharepoint-ai"
    template_pattern => "logstash-sharepoint-ai-*"
    template => "/usr/share/logstash/templates/sharepoint-ai-template.json"
    template_overwrite => true
  }

  # Debug output (only in development)
  if [environment] == "development" {
    stdout {
      codec => rubydebug {
        metadata => false
      }
    }
  }

  # Send critical errors to a separate index
  if [level] == "ERROR" or [level] == "FATAL" or "slow_query" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "logstash-sharepoint-ai-errors-%{+YYYY.MM.dd}"
    }
  }

  # Send security events to security index
  if "security" in [tags] or [level] == "SECURITY" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "logstash-sharepoint-ai-security-%{+YYYY.MM.dd}"
    }
  }

  # Send metrics to a metrics index
  if "metrics" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "logstash-sharepoint-ai-metrics-%{+YYYY.MM.dd}"
    }
  }
}